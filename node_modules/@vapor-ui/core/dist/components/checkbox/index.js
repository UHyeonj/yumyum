'use client';
import "./index.css";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/components/checkbox/checkbox.tsx
import { forwardRef, useId } from "react";
import { Indicator as RadixIndicator, Root as RadixRoot } from "@radix-ui/react-checkbox";
import { Primitive } from "@radix-ui/react-primitive";
import { useControllableState } from "@radix-ui/react-use-controllable-state";
import clsx from "clsx";

// src/libs/create-context.ts
import { createContext as createReactContext, useContext as useReactContext } from "react";
var getErrorMessage = (hook, provider) => {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
};
var createContext = ({
  name,
  strict = true,
  hookName = "useContext",
  providerName = "Provider",
  errorMessage,
  defaultValue
} = {}) => {
  const Context = createReactContext(defaultValue);
  Context.displayName = name;
  function useContext() {
    const context = useReactContext(Context);
    if (!context && strict) {
      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));
      error.name = "ContextError";
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext, Context];
};

// src/utils/create-split-props.ts
var createSplitProps = () => (props, keys) => keys.reduce(
  (previousValue, currentValue) => {
    const [target, source] = previousValue;
    const key = currentValue;
    if (source[key] !== void 0) {
      target[key] = source[key];
    }
    delete source[key];
    return [target, source];
  },
  [{}, __spreadValues({}, props)]
);

// src/components/checkbox/checkbox.css.ts
import { createRuntimeFn as _7a468 } from "@vanilla-extract/recipes/createRuntimeFn";
var control = _7a468({ defaultClassName: "interactions__13di4x95 interactions__13di4x91 interactions-scale_normal__13di4x96 interactions__13di4x93 checkbox__a14mdw7", variantClassNames: { invalid: { true: "checkbox__a14mdw8" }, size: { md: "checkbox__a14mdw9", lg: "checkbox__a14mdwa" } }, defaultVariants: { invalid: false, size: "md" }, compoundVariants: [] });
var indicator = _7a468({ defaultClassName: "checkbox__a14mdwi checkbox__a14mdwf", variantClassNames: { size: { md: "checkbox__a14mdwg", lg: "checkbox__a14mdwh" } }, defaultVariants: { size: "md" }, compoundVariants: [] });
var label = _7a468({ defaultClassName: "typography__1saa0cgi typography__1saa0cgd checkbox__a14mdw4", variantClassNames: { visuallyHidden: { true: "visually-hidden__1q7xssa0" } }, defaultVariants: { visuallyHidden: false }, compoundVariants: [] });
var root = _7a468({ defaultClassName: "checkbox__a14mdw2 checkbox__a14mdw0", variantClassNames: { disabled: { true: "checkbox__a14mdw1" } }, defaultVariants: { disabled: false }, compoundVariants: [] });

// src/components/checkbox/checkbox.tsx
import { jsx, jsxs } from "react/jsx-runtime";
var [CheckboxProvider, useCheckboxContext] = createContext({
  name: "Checkbox",
  hookName: "useCheckbox",
  providerName: "CheckboxProvider"
});
var Root = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  const checkboxId = useId();
  const [checkboxProps, otherProps] = createSplitProps()(props, [
    "checked",
    "onCheckedChange",
    "defaultChecked",
    "indeterminate",
    "size",
    "invalid",
    "disabled",
    "visuallyHidden"
  ]);
  const { disabled } = checkboxProps;
  return /* @__PURE__ */ jsx(CheckboxProvider, { value: __spreadValues({ checkboxId }, checkboxProps), children: /* @__PURE__ */ jsx(
    Primitive.div,
    __spreadValues({
      ref,
      className: clsx(root({ disabled }), className)
    }, otherProps)
  ) });
});
Root.displayName = "Checkbox.Root";
var Label = forwardRef(
  (_a, ref) => {
    var _b = _a, { htmlFor, className } = _b, props = __objRest(_b, ["htmlFor", "className"]);
    const { checkboxId, visuallyHidden } = useCheckboxContext();
    return /* @__PURE__ */ jsx(
      Primitive.label,
      __spreadValues({
        ref,
        htmlFor: htmlFor || checkboxId,
        className: clsx(label({ visuallyHidden }), className)
      }, props)
    );
  }
);
var Control = forwardRef(
  (_a, ref) => {
    var _b = _a, { id, className } = _b, props = __objRest(_b, ["id", "className"]);
    const {
      checkboxId,
      checked,
      onCheckedChange,
      defaultChecked,
      indeterminate,
      invalid,
      disabled,
      size
    } = useCheckboxContext();
    const [checkedState, setCheckedState] = useControllableState({
      prop: indeterminate ? "indeterminate" : checked,
      defaultProp: indeterminate ? "indeterminate" : defaultChecked || false,
      onChange: (state) => {
        if (state === "indeterminate") return;
        onCheckedChange == null ? void 0 : onCheckedChange(state);
      }
    });
    return /* @__PURE__ */ jsx(
      RadixRoot,
      __spreadProps(__spreadValues({
        ref,
        id: checkboxId || id,
        checked: checkedState,
        onCheckedChange: setCheckedState,
        disabled,
        "aria-invalid": invalid,
        className: clsx(control({ invalid, size }), className)
      }, props), {
        children: /* @__PURE__ */ jsxs(RadixIndicator, { className: indicator({ size }), children: [
          checkedState === "indeterminate" && /* @__PURE__ */ jsx(DashIcon, {}),
          checkedState === true && /* @__PURE__ */ jsx(CheckIcon, {})
        ] })
      })
    );
  }
);
Control.displayName = "Checkbox.Control";
var CheckIcon = (props) => {
  return /* @__PURE__ */ jsx("svg", __spreadProps(__spreadValues({ viewBox: "0 0 8 7", xmlns: "http://www.w3.org/2000/svg" }, props), { children: /* @__PURE__ */ jsx(
    "path",
    {
      d: "M11.3135 5.29325c-.391-.391-1.024-.391-1.414 0l-3.364 3.364-.829-.828c-.39-.391-1.023-.391-1.414 0-.39.39-.39 1.023 0 1.414l1.536 1.535c.39.391 1.023.391 1.414 0l4.071-4.071c.391-.39.391-1.023 0-1.414",
      fill: "currentColor",
      fillRule: "evenodd",
      transform: "translate(-4 -5)"
    }
  ) }));
};
var DashIcon = (props) => {
  return /* @__PURE__ */ jsx("svg", __spreadProps(__spreadValues({ viewBox: "0 0 8 2", xmlns: "http://www.w3.org/2000/svg" }, props), { children: /* @__PURE__ */ jsx("rect", { fill: "currentColor", fillRule: "evenodd", height: "2", rx: "1", width: "8" }) }));
};
var Checkbox = { Root, Label, Control };
export {
  Checkbox,
  Control as CheckboxControl,
  Label as CheckboxLabel,
  Root as CheckboxRoot
};
//# sourceMappingURL=index.js.map