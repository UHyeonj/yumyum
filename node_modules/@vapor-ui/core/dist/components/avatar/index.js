'use client';
import "./index.css";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/components/avatar/avatar.tsx
import { forwardRef } from "react";
import {
  Root as RadixAvatar,
  Fallback as RadixFallback,
  Image as RadixImage
} from "@radix-ui/react-avatar";
import { assignInlineVars } from "@vanilla-extract/dynamic";
import clsx from "clsx";

// src/libs/create-context.ts
import { createContext as createReactContext, useContext as useReactContext } from "react";
var getErrorMessage = (hook, provider) => {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
};
var createContext = ({
  name,
  strict = true,
  hookName = "useContext",
  providerName = "Provider",
  errorMessage,
  defaultValue
} = {}) => {
  const Context = createReactContext(defaultValue);
  Context.displayName = name;
  function useContext() {
    const context = useReactContext(Context);
    if (!context && strict) {
      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));
      error.name = "ContextError";
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext, Context];
};

// src/styles/vars.css.ts
var vars = { color: { black: "var(--vapor-color-black)", white: "var(--vapor-color-white)", gray: { "100": "var(--vapor-color-gray-100)", "200": "var(--vapor-color-gray-200)", "300": "var(--vapor-color-gray-300)", "400": "var(--vapor-color-gray-400)", "500": "var(--vapor-color-gray-500)", "600": "var(--vapor-color-gray-600)", "700": "var(--vapor-color-gray-700)", "800": "var(--vapor-color-gray-800)", "900": "var(--vapor-color-gray-900)", "950": "var(--vapor-color-gray-950)", "000": "var(--vapor-color-gray-000)", "050": "var(--vapor-color-gray-050)" }, red: { "100": "var(--vapor-color-red-100)", "200": "var(--vapor-color-red-200)", "300": "var(--vapor-color-red-300)", "400": "var(--vapor-color-red-400)", "500": "var(--vapor-color-red-500)", "600": "var(--vapor-color-red-600)", "700": "var(--vapor-color-red-700)", "800": "var(--vapor-color-red-800)", "900": "var(--vapor-color-red-900)", "050": "var(--vapor-color-red-050)" }, pink: { "100": "var(--vapor-color-pink-100)", "200": "var(--vapor-color-pink-200)", "300": "var(--vapor-color-pink-300)", "400": "var(--vapor-color-pink-400)", "500": "var(--vapor-color-pink-500)", "600": "var(--vapor-color-pink-600)", "700": "var(--vapor-color-pink-700)", "800": "var(--vapor-color-pink-800)", "900": "var(--vapor-color-pink-900)", "050": "var(--vapor-color-pink-050)" }, grape: { "100": "var(--vapor-color-grape-100)", "200": "var(--vapor-color-grape-200)", "300": "var(--vapor-color-grape-300)", "400": "var(--vapor-color-grape-400)", "500": "var(--vapor-color-grape-500)", "600": "var(--vapor-color-grape-600)", "700": "var(--vapor-color-grape-700)", "800": "var(--vapor-color-grape-800)", "900": "var(--vapor-color-grape-900)", "050": "var(--vapor-color-grape-050)" }, violet: { "100": "var(--vapor-color-violet-100)", "200": "var(--vapor-color-violet-200)", "300": "var(--vapor-color-violet-300)", "400": "var(--vapor-color-violet-400)", "500": "var(--vapor-color-violet-500)", "600": "var(--vapor-color-violet-600)", "700": "var(--vapor-color-violet-700)", "800": "var(--vapor-color-violet-800)", "900": "var(--vapor-color-violet-900)", "050": "var(--vapor-color-violet-050)" }, blue: { "100": "var(--vapor-color-blue-100)", "200": "var(--vapor-color-blue-200)", "300": "var(--vapor-color-blue-300)", "400": "var(--vapor-color-blue-400)", "500": "var(--vapor-color-blue-500)", "600": "var(--vapor-color-blue-600)", "700": "var(--vapor-color-blue-700)", "800": "var(--vapor-color-blue-800)", "900": "var(--vapor-color-blue-900)", "050": "var(--vapor-color-blue-050)" }, cyan: { "100": "var(--vapor-color-cyan-100)", "200": "var(--vapor-color-cyan-200)", "300": "var(--vapor-color-cyan-300)", "400": "var(--vapor-color-cyan-400)", "500": "var(--vapor-color-cyan-500)", "600": "var(--vapor-color-cyan-600)", "700": "var(--vapor-color-cyan-700)", "800": "var(--vapor-color-cyan-800)", "900": "var(--vapor-color-cyan-900)", "050": "var(--vapor-color-cyan-050)" }, green: { "100": "var(--vapor-color-green-100)", "200": "var(--vapor-color-green-200)", "300": "var(--vapor-color-green-300)", "400": "var(--vapor-color-green-400)", "500": "var(--vapor-color-green-500)", "600": "var(--vapor-color-green-600)", "700": "var(--vapor-color-green-700)", "800": "var(--vapor-color-green-800)", "900": "var(--vapor-color-green-900)", "050": "var(--vapor-color-green-050)" }, lime: { "100": "var(--vapor-color-lime-100)", "200": "var(--vapor-color-lime-200)", "300": "var(--vapor-color-lime-300)", "400": "var(--vapor-color-lime-400)", "500": "var(--vapor-color-lime-500)", "600": "var(--vapor-color-lime-600)", "700": "var(--vapor-color-lime-700)", "800": "var(--vapor-color-lime-800)", "900": "var(--vapor-color-lime-900)", "050": "var(--vapor-color-lime-050)" }, yellow: { "100": "var(--vapor-color-yellow-100)", "200": "var(--vapor-color-yellow-200)", "300": "var(--vapor-color-yellow-300)", "400": "var(--vapor-color-yellow-400)", "500": "var(--vapor-color-yellow-500)", "600": "var(--vapor-color-yellow-600)", "700": "var(--vapor-color-yellow-700)", "800": "var(--vapor-color-yellow-800)", "900": "var(--vapor-color-yellow-900)", "050": "var(--vapor-color-yellow-050)" }, orange: { "100": "var(--vapor-color-orange-100)", "200": "var(--vapor-color-orange-200)", "300": "var(--vapor-color-orange-300)", "400": "var(--vapor-color-orange-400)", "500": "var(--vapor-color-orange-500)", "600": "var(--vapor-color-orange-600)", "700": "var(--vapor-color-orange-700)", "800": "var(--vapor-color-orange-800)", "900": "var(--vapor-color-orange-900)", "050": "var(--vapor-color-orange-050)" }, background: { "rgb-primary": "var(--vapor-color-background-rgb-primary)", primary: "var(--vapor-color-background-primary)", "rgb-secondary": "var(--vapor-color-background-rgb-secondary)", secondary: "var(--vapor-color-background-secondary)", "rgb-success": "var(--vapor-color-background-rgb-success)", success: "var(--vapor-color-background-success)", "rgb-warning": "var(--vapor-color-background-rgb-warning)", warning: "var(--vapor-color-background-warning)", "rgb-danger": "var(--vapor-color-background-rgb-danger)", danger: "var(--vapor-color-background-danger)", "rgb-hint": "var(--vapor-color-background-rgb-hint)", hint: "var(--vapor-color-background-hint)", "rgb-contrast": "var(--vapor-color-background-rgb-contrast)", contrast: "var(--vapor-color-background-contrast)", "rgb-normal": "var(--vapor-color-background-rgb-normal)", normal: "var(--vapor-color-background-normal)", "normal-lighter": "var(--vapor-color-background-normal-lighter)", "normal-darker": "var(--vapor-color-background-normal-darker)" }, foreground: { primary: "var(--vapor-color-foreground-primary)", "primary-darker": "var(--vapor-color-foreground-primary-darker)", secondary: "var(--vapor-color-foreground-secondary)", "secondary-darker": "var(--vapor-color-foreground-secondary-darker)", success: "var(--vapor-color-foreground-success)", "success-darker": "var(--vapor-color-foreground-success-darker)", warning: "var(--vapor-color-foreground-warning)", "warning-darker": "var(--vapor-color-foreground-warning-darker)", danger: "var(--vapor-color-foreground-danger)", "danger-darker": "var(--vapor-color-foreground-danger-darker)", hint: "var(--vapor-color-foreground-hint)", "hint-darker": "var(--vapor-color-foreground-hint-darker)", contrast: "var(--vapor-color-foreground-contrast)", "contrast-darker": "var(--vapor-color-foreground-contrast-darker)", accent: "var(--vapor-color-foreground-accent)", normal: "var(--vapor-color-foreground-normal)", "normal-lighter": "var(--vapor-color-foreground-normal-lighter)" }, border: { normal: "var(--vapor-color-border-normal)", primary: "var(--vapor-color-border-primary)", secondary: "var(--vapor-color-border-secondary)", success: "var(--vapor-color-border-success)", warning: "var(--vapor-color-border-warning)", danger: "var(--vapor-color-border-danger)", hint: "var(--vapor-color-border-hint)", contrast: "var(--vapor-color-border-contrast)" }, logo: { normal: "var(--vapor-color-logo-normal)" } }, size: { borderRadius: { "100": "var(--vapor-size-borderRadius-100)", "200": "var(--vapor-size-borderRadius-200)", "300": "var(--vapor-size-borderRadius-300)", "400": "var(--vapor-size-borderRadius-400)", "500": "var(--vapor-size-borderRadius-500)", "600": "var(--vapor-size-borderRadius-600)", "700": "var(--vapor-size-borderRadius-700)", "800": "var(--vapor-size-borderRadius-800)", "900": "var(--vapor-size-borderRadius-900)", "000": "var(--vapor-size-borderRadius-000)", "050": "var(--vapor-size-borderRadius-050)" }, dimension: { "100": "var(--vapor-size-dimension-100)", "150": "var(--vapor-size-dimension-150)", "175": "var(--vapor-size-dimension-175)", "200": "var(--vapor-size-dimension-200)", "225": "var(--vapor-size-dimension-225)", "250": "var(--vapor-size-dimension-250)", "300": "var(--vapor-size-dimension-300)", "400": "var(--vapor-size-dimension-400)", "500": "var(--vapor-size-dimension-500)", "600": "var(--vapor-size-dimension-600)", "700": "var(--vapor-size-dimension-700)", "800": "var(--vapor-size-dimension-800)", "025": "var(--vapor-size-dimension-025)", "050": "var(--vapor-size-dimension-050)", "075": "var(--vapor-size-dimension-075)" }, space: { "100": "var(--vapor-size-space-100)", "150": "var(--vapor-size-space-150)", "175": "var(--vapor-size-space-175)", "200": "var(--vapor-size-space-200)", "225": "var(--vapor-size-space-225)", "250": "var(--vapor-size-space-250)", "300": "var(--vapor-size-space-300)", "400": "var(--vapor-size-space-400)", "500": "var(--vapor-size-space-500)", "600": "var(--vapor-size-space-600)", "700": "var(--vapor-size-space-700)", "800": "var(--vapor-size-space-800)", "900": "var(--vapor-size-space-900)", "000": "var(--vapor-size-space-000)", "025": "var(--vapor-size-space-025)", "050": "var(--vapor-size-space-050)", "075": "var(--vapor-size-space-075)" } }, typography: { fontSize: { "100": "var(--vapor-typography-fontSize-100)", "200": "var(--vapor-typography-fontSize-200)", "300": "var(--vapor-typography-fontSize-300)", "400": "var(--vapor-typography-fontSize-400)", "500": "var(--vapor-typography-fontSize-500)", "600": "var(--vapor-typography-fontSize-600)", "700": "var(--vapor-typography-fontSize-700)", "800": "var(--vapor-typography-fontSize-800)", "900": "var(--vapor-typography-fontSize-900)", "1000": "var(--vapor-typography-fontSize-1000)", "025": "var(--vapor-typography-fontSize-025)", "050": "var(--vapor-typography-fontSize-050)", "075": "var(--vapor-typography-fontSize-075)" }, lineHeight: { "100": "var(--vapor-typography-lineHeight-100)", "200": "var(--vapor-typography-lineHeight-200)", "300": "var(--vapor-typography-lineHeight-300)", "400": "var(--vapor-typography-lineHeight-400)", "500": "var(--vapor-typography-lineHeight-500)", "600": "var(--vapor-typography-lineHeight-600)", "700": "var(--vapor-typography-lineHeight-700)", "800": "var(--vapor-typography-lineHeight-800)", "900": "var(--vapor-typography-lineHeight-900)", "1000": "var(--vapor-typography-lineHeight-1000)", "025": "var(--vapor-typography-lineHeight-025)", "050": "var(--vapor-typography-lineHeight-050)", "075": "var(--vapor-typography-lineHeight-075)" }, letterSpacing: { "100": "var(--vapor-typography-letterSpacing-100)", "200": "var(--vapor-typography-letterSpacing-200)", "300": "var(--vapor-typography-letterSpacing-300)", "400": "var(--vapor-typography-letterSpacing-400)", "000": "var(--vapor-typography-letterSpacing-000)" }, fontFamily: { sans: "var(--vapor-typography-fontFamily-sans)", code: "var(--vapor-typography-fontFamily-code)" }, fontWeight: { "400": "var(--vapor-typography-fontWeight-400)", "500": "var(--vapor-typography-fontWeight-500)", "700": "var(--vapor-typography-fontWeight-700)", "800": "var(--vapor-typography-fontWeight-800)" } } };

// src/utils/create-split-props.ts
var createSplitProps = () => (props, keys) => keys.reduce(
  (previousValue, currentValue) => {
    const [target, source] = previousValue;
    const key = currentValue;
    if (source[key] !== void 0) {
      target[key] = source[key];
    }
    delete source[key];
    return [target, source];
  },
  [{}, __spreadValues({}, props)]
);

// src/components/avatar/avatar.css.ts
import { createRuntimeFn as _7a468 } from "@vanilla-extract/recipes/createRuntimeFn";
var fallback = _7a468({ defaultClassName: "avatar__em5te2l avatar__em5te2g", variantClassNames: { size: { sm: "avatar__em5te2h", md: "avatar__em5te2i", lg: "avatar__em5te2j", xl: "avatar__em5te2k" } }, defaultVariants: { size: "md" }, compoundVariants: [] });
var fallbackBgVar = "var(--avatar-fallback-background-color__em5te2f)";
var image = "avatar__em5te2q";
var root = _7a468({ defaultClassName: "avatar__em5te28 avatar__em5te21", variantClassNames: { size: { sm: "avatar__em5te22", md: "avatar__em5te23", lg: "avatar__em5te24", xl: "avatar__em5te25" }, shape: { square: "avatar__em5te26", circle: "avatar__em5te27" } }, defaultVariants: { size: "md", shape: "square" }, compoundVariants: [] });

// src/components/avatar/avatar.tsx
import { jsx, jsxs } from "react/jsx-runtime";
var [AvatarProvider, useAvatarContext] = createContext({
  name: "AvatarContext",
  providerName: "AvatarProvider",
  hookName: "useAvatarContext"
});
var Root = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  const [variantProps, otherProps] = createSplitProps()(props, [
    "src",
    "alt",
    "size",
    "shape",
    "delayMs"
  ]);
  const { shape, size } = variantProps;
  return /* @__PURE__ */ jsx(AvatarProvider, { value: variantProps, children: /* @__PURE__ */ jsx(
    RadixAvatar,
    __spreadValues({
      ref,
      className: clsx(root({ shape, size }), className)
    }, otherProps)
  ) });
});
Root.displayName = "Avatar.Root";
var Image = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  const { src, alt } = useAvatarContext();
  return /* @__PURE__ */ jsx(
    RadixImage,
    __spreadValues({
      ref,
      src,
      alt,
      className: clsx(image, className)
    }, props)
  );
});
Image.displayName = "Avatar.Image";
var Fallback = forwardRef(
  (_a, ref) => {
    var _b = _a, { className, style, children } = _b, props = __objRest(_b, ["className", "style", "children"]);
    const { size, alt, delayMs } = useAvatarContext();
    const background = getRandomColor(alt);
    return /* @__PURE__ */ jsx(
      RadixFallback,
      __spreadProps(__spreadValues({
        ref,
        delayMs,
        style: __spreadValues(__spreadValues({}, assignInlineVars({ [fallbackBgVar]: background })), style),
        className: clsx(fallback({ size }), className)
      }, props), {
        children: children != null ? children : getAvatarInitials(alt)
      })
    );
  }
);
Fallback.displayName = "Avatar.Fallback";
var Simple = forwardRef((props, ref) => {
  return /* @__PURE__ */ jsxs(Root, __spreadProps(__spreadValues({ ref }, props), { children: [
    /* @__PURE__ */ jsx(Fallback, {}),
    /* @__PURE__ */ jsx(Image, {})
  ] }));
});
Simple.displayName = "Avatar.Simple";
var getAvatarInitials = (name = "vapor") => {
  return name.charAt(0).toUpperCase();
};
var stringAsciiPRNG = (value, m) => {
  const charCodes = value.split("").map((letter) => letter.charCodeAt(0));
  const len = charCodes.length;
  const a = len % (m - 1) + 1;
  const c = charCodes.reduce((current, next) => current + next) % m;
  const random = charCodes.reduce((acc, cur) => {
    if (!acc) return cur % m;
    return (a * acc + c) % m;
  }, 0);
  return random;
};
var getRandomNumber = (maxNumber) => {
  const randomNumber = Math.floor(Math.random() * maxNumber);
  return randomNumber;
};
var DEFAULT_COLORS = [
  vars.color.red["500"],
  vars.color.pink["500"],
  vars.color.grape["500"],
  vars.color.violet["500"],
  vars.color.blue["500"],
  vars.color.green["500"],
  vars.color.orange["500"]
];
var getRandomColor = (value, colors = DEFAULT_COLORS) => {
  if (!value) return colors[getRandomNumber(colors.length)];
  return colors[stringAsciiPRNG(value, colors.length)];
};
var Avatar = { Root, Image, Fallback, Simple };
export {
  Avatar,
  Fallback as AvatarFallback,
  Image as AvatarImage,
  Root as AvatarRoot,
  Simple as AvatarSimple
};
//# sourceMappingURL=index.js.map