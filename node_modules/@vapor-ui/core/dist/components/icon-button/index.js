'use client';
import "./index.css";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/components/icon-button/icon-button.tsx
import { forwardRef as forwardRef3 } from "react";
import clsx3 from "clsx";

// src/libs/create-slot.ts
import { Children, Fragment, cloneElement, forwardRef, isValidElement } from "react";

// src/utils/compose-refs.ts
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref !== null && ref !== void 0) {
    ref.current = value;
  }
}
function composeRefs(...refs) {
  return (node) => {
    for (const ref of refs) {
      setRef(ref, node);
    }
  };
}

// src/utils/get-element-ref.ts
var getElementRef = (element) => {
  var _a, _b;
  let getter = (_a = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a.get;
  let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.ref;
  }
  getter = (_b = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b.get;
  mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.props.ref;
  }
  return element.props.ref || element.ref;
};

// src/utils/merge-props.ts
var isString = (v) => typeof v === "string";
var callAll = (
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (...fns) => (...a) => {
    fns.forEach(function(fn) {
      fn == null ? void 0 : fn(...a);
    });
  }
);
var clsx = (...args) => args.map((str) => {
  var _a;
  return (_a = str == null ? void 0 : str.trim) == null ? void 0 : _a.call(str);
}).filter(Boolean).join(" ");
var CSS_REGEX = /((?:--)?(?:\w+-?)+)\s*:\s*([^;]*)/g;
var serialize = (style) => {
  const res = {};
  let match;
  while (match = CSS_REGEX.exec(style)) {
    res[match[1]] = match[2];
  }
  return res;
};
var css = (a, b) => {
  if (isString(a)) {
    if (isString(b)) return `${a};${b}`;
    a = serialize(a);
  } else if (isString(b)) {
    b = serialize(b);
  }
  return Object.assign({}, a != null ? a : {}, b != null ? b : {});
};
function mergeProps(...args) {
  const result = {};
  for (const props of args) {
    for (const key in result) {
      if (key.startsWith("on") && typeof result[key] === "function" && typeof props[key] === "function") {
        result[key] = callAll(props[key], result[key]);
        continue;
      }
      if (key === "className" || key === "class") {
        result[key] = clsx(result[key], props[key]);
        continue;
      }
      if (key === "style") {
        result[key] = css(result[key], props[key]);
        continue;
      }
      result[key] = props[key] !== void 0 ? props[key] : result[key];
    }
    for (const key in props) {
      if (result[key] === void 0) {
        result[key] = props[key];
      }
    }
  }
  return result;
}

// src/libs/create-slot.ts
var createSlot = (children) => {
  const Slot = forwardRef((slotProps, forwardedRef) => {
    if (!isValidElement(children)) {
      return Children.count(children) > 1 ? Children.only(null) : null;
    }
    const childrenRef = getElementRef(children);
    const props = mergeProps(slotProps || {}, children.props);
    if (children.type !== Fragment && children.props.ref) {
      props.ref = composeRefs(forwardedRef, childrenRef);
    }
    return cloneElement(children, props);
  });
  return Slot;
};

// src/utils/create-split-props.ts
var createSplitProps = () => (props, keys) => keys.reduce(
  (previousValue, currentValue) => {
    const [target, source] = previousValue;
    const key = currentValue;
    if (source[key] !== void 0) {
      target[key] = source[key];
    }
    delete source[key];
    return [target, source];
  },
  [{}, __spreadValues({}, props)]
);

// src/components/button/button.tsx
import { forwardRef as forwardRef2 } from "react";
import { Primitive } from "@radix-ui/react-primitive";
import clsx2 from "clsx";

// src/components/button/button.css.ts
import { createRuntimeFn as _7a468 } from "@vanilla-extract/recipes/createRuntimeFn";
var root = _7a468({ defaultClassName: "interactions__13di4x95 interactions__13di4x91 interactions-scale_normal__13di4x96 interactions__13di4x93 button__rdwa1t6", variantClassNames: { size: { sm: "button__rdwa1t7", md: "button__rdwa1t8", lg: "button__rdwa1t9", xl: "button__rdwa1ta" }, color: { primary: "button__rdwa1tb", secondary: "button__rdwa1tc", success: "button__rdwa1td", warning: "button__rdwa1te", danger: "button__rdwa1tf", contrast: "button__rdwa1tg" }, variant: { fill: "button__rdwa1th", outline: "button__rdwa1ti", ghost: "button__rdwa1tj" }, stretch: { true: "button__rdwa1tk" } }, defaultVariants: { color: "primary", size: "md", variant: "fill", stretch: false }, compoundVariants: [] });

// src/components/button/button.tsx
import { jsx } from "react/jsx-runtime";
var Button = forwardRef2(
  (_a, ref) => {
    var _b = _a, { className, children } = _b, props = __objRest(_b, ["className", "children"]);
    const [variantsProps, otherProps] = createSplitProps()(props, [
      "color",
      "size",
      "variant",
      "stretch"
    ]);
    return /* @__PURE__ */ jsx(
      Primitive.button,
      __spreadProps(__spreadValues({
        ref,
        className: clsx2(root(variantsProps), className),
        "data-disabled": otherProps.disabled
      }, otherProps), {
        children
      })
    );
  }
);
Button.displayName = "Button";

// src/components/icon-button/icon-button.css.ts
import { createRuntimeFn as _7a4682 } from "@vanilla-extract/recipes/createRuntimeFn";
var icon = _7a4682({ defaultClassName: "icon-button__1ssqycy9", variantClassNames: { size: { sm: "icon-button__1ssqycy5", md: "icon-button__1ssqycy6", lg: "icon-button__1ssqycy7", xl: "icon-button__1ssqycy8" } }, defaultVariants: {}, compoundVariants: [] });
var root2 = _7a4682({ defaultClassName: "icon-button__1ssqycy2 icon-button__1ssqycy0", variantClassNames: { shape: { square: "icon-button-shape_square__1ssqycy3", circle: "icon-button__1ssqycy1" } }, defaultVariants: { shape: "square" }, compoundVariants: [] });

// src/components/icon-button/icon-button.tsx
import { jsx as jsx2 } from "react/jsx-runtime";
var IconButton = forwardRef3(
  (_a, ref) => {
    var _b = _a, { "aria-label": ariaLabel, className, children } = _b, props = __objRest(_b, ["aria-label", "className", "children"]);
    const [variantProps, otherProps] = createSplitProps()(props, ["shape"]);
    const IconSlot = createSlot(children);
    return /* @__PURE__ */ jsx2(
      Button,
      __spreadProps(__spreadValues({
        ref,
        "aria-label": ariaLabel,
        className: clsx3(root2(variantProps), className)
      }, otherProps), {
        stretch: false,
        children: /* @__PURE__ */ jsx2(IconSlot, { "aria-hidden": true, className: icon({ size: otherProps.size }) })
      })
    );
  }
);
IconButton.displayName = "IconButton";
export {
  IconButton
};
//# sourceMappingURL=index.js.map