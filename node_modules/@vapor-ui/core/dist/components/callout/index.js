'use client';
import "./index.css";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/components/callout/callout.tsx
import { forwardRef } from "react";
import { Primitive } from "@radix-ui/react-primitive";
import clsx from "clsx";

// src/utils/create-split-props.ts
var createSplitProps = () => (props, keys) => keys.reduce(
  (previousValue, currentValue) => {
    const [target, source] = previousValue;
    const key = currentValue;
    if (source[key] !== void 0) {
      target[key] = source[key];
    }
    delete source[key];
    return [target, source];
  },
  [{}, __spreadValues({}, props)]
);

// src/components/callout/callout.css.ts
import { createRuntimeFn as _7a468 } from "@vanilla-extract/recipes/createRuntimeFn";
var root = _7a468({ defaultClassName: "callout__17t9x5h7 callout__17t9x5h0", variantClassNames: { color: { primary: "callout__17t9x5h1", success: "callout__17t9x5h2", warning: "callout__17t9x5h3", danger: "callout__17t9x5h4", hint: "callout__17t9x5h5", contrast: "callout__17t9x5h6" } }, defaultVariants: { color: "primary" }, compoundVariants: [] });

// src/components/callout/callout.tsx
import { jsx } from "react/jsx-runtime";
var Callout = forwardRef(
  (_a, ref) => {
    var _b = _a, { className, children } = _b, props = __objRest(_b, ["className", "children"]);
    const [variantProps, otherProps] = createSplitProps()(props, ["color"]);
    return /* @__PURE__ */ jsx(
      Primitive.div,
      __spreadProps(__spreadValues({
        ref,
        className: clsx(root(variantProps), className)
      }, otherProps), {
        children
      })
    );
  }
);
Callout.displayName = "Callout";
export {
  Callout
};
//# sourceMappingURL=index.js.map