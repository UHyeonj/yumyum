import * as react from 'react';
import { ComponentPropsWithoutRef } from 'react';
import { Root as Root$1, List as List$1, Item as Item$1, Link as Link$1 } from '@radix-ui/react-navigation-menu';
import * as _vanilla_extract_recipes from '@vanilla-extract/recipes';
import { RecipeVariants } from '@vanilla-extract/recipes';

declare const list: _vanilla_extract_recipes.RuntimeFn<{
    stretch: {
        true: string;
        false: string;
    };
    direction: {
        horizontal: string;
        vertical: string;
    };
}>;
declare const item: _vanilla_extract_recipes.RuntimeFn<{
    stretch: {
        true: string;
    };
}>;
declare const link: _vanilla_extract_recipes.RuntimeFn<{
    disabled: {
        true: string;
    };
    align: {
        start: string;
        center: string;
        end: string;
    };
    shape: {
        fill: string[];
        ghost: string;
    };
    size: {
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}>;
type ListVariants = NonNullable<RecipeVariants<typeof list>>;
type ItemVariants = NonNullable<RecipeVariants<typeof item>>;
type LinkVariants = NonNullable<RecipeVariants<typeof link>>;

type NavVariants = ListVariants & ItemVariants & LinkVariants;
type NavPrimitiveProps = ComponentPropsWithoutRef<typeof Root$1>;
interface NavRootProps extends NavPrimitiveProps, NavVariants {
    'aria-label': string;
}
declare const Root: react.ForwardRefExoticComponent<NavRootProps & react.RefAttributes<HTMLElement>>;
type ListPrimitiveProps = ComponentPropsWithoutRef<typeof List$1>;
interface NavMenuList extends ListPrimitiveProps {
}
declare const List: react.ForwardRefExoticComponent<NavMenuList & react.RefAttributes<HTMLUListElement>>;
type ItemPrimitiveProps = ComponentPropsWithoutRef<typeof Item$1>;
interface NavItemProps extends ItemPrimitiveProps {
}
declare const Item: react.ForwardRefExoticComponent<NavItemProps & react.RefAttributes<HTMLLIElement>>;
type LinkPrimitiveProps = Omit<ComponentPropsWithoutRef<typeof Link$1>, 'active'>;
interface NavLinkProps extends LinkPrimitiveProps {
    selected?: boolean;
    disabled?: boolean;
}
declare const Link: react.ForwardRefExoticComponent<NavLinkProps & react.RefAttributes<HTMLAnchorElement>>;
interface NavLinkItemProps extends ComponentPropsWithoutRef<typeof Link> {
}
declare const LinkItem: react.ForwardRefExoticComponent<NavLinkItemProps & react.RefAttributes<HTMLAnchorElement>>;

declare const Nav: {
    Root: react.ForwardRefExoticComponent<NavRootProps & react.RefAttributes<HTMLElement>>;
    List: react.ForwardRefExoticComponent<NavMenuList & react.RefAttributes<HTMLUListElement>>;
    Item: react.ForwardRefExoticComponent<NavItemProps & react.RefAttributes<HTMLLIElement>>;
    Link: react.ForwardRefExoticComponent<NavLinkProps & react.RefAttributes<HTMLAnchorElement>>;
    LinkItem: react.ForwardRefExoticComponent<NavLinkItemProps & react.RefAttributes<HTMLAnchorElement>>;
};

export { Nav, Item as NavItem, type NavItemProps, Link as NavLink, LinkItem as NavLinkItem, type NavLinkItemProps, type NavLinkProps, List as NavList, type NavMenuList, Root as NavRoot, type NavRootProps };
