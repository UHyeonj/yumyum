'use client';
"use strict";
require("./index.css");
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/nav/index.ts
var nav_exports = {};
__export(nav_exports, {
  Nav: () => Nav,
  NavItem: () => Item,
  NavLink: () => Link,
  NavLinkItem: () => LinkItem,
  NavList: () => List,
  NavRoot: () => Root
});
module.exports = __toCommonJS(nav_exports);

// src/components/nav/nav.tsx
var import_react2 = require("react");
var import_react_navigation_menu = require("@radix-ui/react-navigation-menu");
var import_clsx = __toESM(require("clsx"));

// src/libs/create-context.ts
var import_react = require("react");
var getErrorMessage = (hook, provider) => {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
};
var createContext = ({
  name,
  strict = true,
  hookName = "useContext",
  providerName = "Provider",
  errorMessage,
  defaultValue
} = {}) => {
  const Context = (0, import_react.createContext)(defaultValue);
  Context.displayName = name;
  function useContext() {
    const context = (0, import_react.useContext)(Context);
    if (!context && strict) {
      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));
      error.name = "ContextError";
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext, Context];
};

// src/utils/create-split-props.ts
var createSplitProps = () => (props, keys) => keys.reduce(
  (previousValue, currentValue) => {
    const [target, source] = previousValue;
    const key = currentValue;
    if (source[key] !== void 0) {
      target[key] = source[key];
    }
    delete source[key];
    return [target, source];
  },
  [{}, __spreadValues({}, props)]
);

// src/components/nav/nav.css.ts
var import_createRuntimeFn = require("@vanilla-extract/recipes/createRuntimeFn");
var item = (0, import_createRuntimeFn.createRuntimeFn)({ defaultClassName: "nav__xuyk5bb", variantClassNames: { stretch: { true: "nav__xuyk5ba" } }, defaultVariants: {}, compoundVariants: [] });
var link = (0, import_createRuntimeFn.createRuntimeFn)({ defaultClassName: "interactions__13di4x95 interactions__13di4x91 interactions-scale_normal__13di4x96 interactions__13di4x93 nav__xuyk5bd", variantClassNames: { disabled: { true: "nav__xuyk5be" }, align: { start: "nav__xuyk5bf", center: "nav__xuyk5bg", end: "nav__xuyk5bh" }, shape: { fill: "nav__xuyk5bi", ghost: "nav__xuyk5bj" }, size: { sm: "nav__xuyk5bk", md: "nav__xuyk5bl", lg: "nav__xuyk5bm", xl: "nav__xuyk5bn" } }, defaultVariants: { size: "md", shape: "fill", align: "center", disabled: false }, compoundVariants: [] });
var list = (0, import_createRuntimeFn.createRuntimeFn)({ defaultClassName: "nav__xuyk5b5 nav__xuyk5b0", variantClassNames: { stretch: { true: "nav__xuyk5b1", false: "nav__xuyk5b2" }, direction: { horizontal: "nav__xuyk5b3", vertical: "nav__xuyk5b4" } }, defaultVariants: { direction: "horizontal", stretch: false }, compoundVariants: [] });

// src/components/nav/nav.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var [NavProvider, useNavContext] = createContext({
  name: "NavContext",
  providerName: "NavProvider",
  hookName: "useNavContext"
});
var Root = (0, import_react2.forwardRef)((_a, ref) => {
  var _b = _a, { "aria-label": ariaLabel } = _b, props = __objRest(_b, ["aria-label"]);
  const [variantProps, otherProps] = createSplitProps()(props, [
    "direction",
    "size",
    "shape",
    "stretch",
    "align",
    "disabled"
  ]);
  const { direction } = variantProps;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(NavProvider, { value: variantProps, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_react_navigation_menu.Root,
    __spreadValues({
      ref,
      orientation: direction,
      "aria-label": ariaLabel || void 0
    }, otherProps)
  ) });
});
Root.displayName = "Nav.Root";
var List = (0, import_react2.forwardRef)((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  const { direction, stretch } = useNavContext();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_react_navigation_menu.List,
    __spreadValues({
      ref,
      className: (0, import_clsx.default)(list({ direction, stretch }), className)
    }, props)
  );
});
List.displayName = "Nav.List";
var Item = (0, import_react2.forwardRef)((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  const { stretch } = useNavContext();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_navigation_menu.Item, __spreadValues({ ref, className: (0, import_clsx.default)(item({ stretch }), className) }, props));
});
Item.displayName = "Nav.Item";
var Link = (0, import_react2.forwardRef)(
  (_a, ref) => {
    var _b = _a, { selected, disabled, href, className } = _b, props = __objRest(_b, ["selected", "disabled", "href", "className"]);
    const { shape, size, align } = useNavContext();
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_react_navigation_menu.Link,
      __spreadValues({
        ref,
        href: disabled ? void 0 : href,
        active: selected,
        "data-active": void 0,
        "data-selected": selected ? "true" : void 0,
        "aria-disabled": disabled ? "true" : void 0,
        className: (0, import_clsx.default)(link({ shape, size, align, disabled }), className)
      }, props)
    );
  }
);
Link.displayName = "Nav.Link";
var LinkItem = (0, import_react2.forwardRef)((props, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Nav.Item, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Nav.Link, __spreadValues({ ref }, props)) });
});
LinkItem.displayName = "Nav.LinkItem";
var Nav = { Root, List, Item, Link, LinkItem };
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Nav,
  NavItem,
  NavLink,
  NavLinkItem,
  NavList,
  NavRoot
});
//# sourceMappingURL=index.cjs.map