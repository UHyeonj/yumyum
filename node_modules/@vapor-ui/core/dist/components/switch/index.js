'use client';
import "./index.css";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/components/switch/switch.tsx
import { forwardRef, useId } from "react";
import { Primitive } from "@radix-ui/react-primitive";
import { Thumb as RadixSwitchIndicator, Root as RadixSwitchRoot } from "@radix-ui/react-switch";
import clsx from "clsx";

// src/libs/create-context.ts
import { createContext as createReactContext, useContext as useReactContext } from "react";
var getErrorMessage = (hook, provider) => {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
};
var createContext = ({
  name,
  strict = true,
  hookName = "useContext",
  providerName = "Provider",
  errorMessage,
  defaultValue
} = {}) => {
  const Context = createReactContext(defaultValue);
  Context.displayName = name;
  function useContext() {
    const context = useReactContext(Context);
    if (!context && strict) {
      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));
      error.name = "ContextError";
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext, Context];
};

// src/utils/create-split-props.ts
var createSplitProps = () => (props, keys) => keys.reduce(
  (previousValue, currentValue) => {
    const [target, source] = previousValue;
    const key = currentValue;
    if (source[key] !== void 0) {
      target[key] = source[key];
    }
    delete source[key];
    return [target, source];
  },
  [{}, __spreadValues({}, props)]
);

// src/components/switch/switch.css.ts
import { createRuntimeFn as _7a468 } from "@vanilla-extract/recipes/createRuntimeFn";
var control = _7a468({ defaultClassName: "interactions__13di4x95 interactions__13di4x91 interactions-scale_normal__13di4x96 interactions__13di4x93 switch__1kcrr7k4", variantClassNames: { size: { sm: "switch__1kcrr7k5", md: "switch__1kcrr7k6", lg: "switch__1kcrr7k7" } }, defaultVariants: { size: "md" }, compoundVariants: [] });
var indicator = _7a468({ defaultClassName: "switch__1kcrr7kg switch__1kcrr7kc", variantClassNames: { size: { sm: "switch__1kcrr7kd", md: "switch__1kcrr7ke", lg: "switch__1kcrr7kf" } }, defaultVariants: { size: "md" }, compoundVariants: [] });
var label = _7a468({ defaultClassName: "switch__1kcrr7kl switch__1kcrr7kk", variantClassNames: { visuallyHidden: { true: "visually-hidden__1q7xssa0" } }, defaultVariants: { visuallyHidden: false }, compoundVariants: [] });
var root = _7a468({ defaultClassName: "switch__1kcrr7k2 switch__1kcrr7k0", variantClassNames: { disabled: { true: "switch__1kcrr7k1" } }, defaultVariants: { disabled: false }, compoundVariants: [] });

// src/components/switch/switch.tsx
import { jsx } from "react/jsx-runtime";
var [SwitchProvider, useSwitchContext] = createContext({
  name: "Switch",
  hookName: "useSwitch",
  providerName: "SwitchProvider"
});
var Root = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  const switchId = useId();
  const [switchProps, otherProps] = createSplitProps()(props, [
    "checked",
    "onCheckedChange",
    "defaultChecked",
    "disabled",
    "size",
    "visuallyHidden"
  ]);
  const { disabled } = switchProps;
  return /* @__PURE__ */ jsx(SwitchProvider, { value: __spreadValues({ switchId }, switchProps), children: /* @__PURE__ */ jsx(
    Primitive.div,
    __spreadValues({
      ref,
      className: clsx(root({ disabled }), className)
    }, otherProps)
  ) });
});
Root.displayName = "Switch.Root";
var Label = forwardRef(
  (_a, ref) => {
    var _b = _a, { htmlFor, className } = _b, props = __objRest(_b, ["htmlFor", "className"]);
    const { switchId, visuallyHidden } = useSwitchContext();
    return /* @__PURE__ */ jsx(
      Primitive.label,
      __spreadValues({
        ref,
        htmlFor: htmlFor || switchId,
        className: clsx(label({ visuallyHidden }), className)
      }, props)
    );
  }
);
Label.displayName = "Switch.Label";
var Control = forwardRef(
  (_a, ref) => {
    var _b = _a, { id, className } = _b, props = __objRest(_b, ["id", "className"]);
    const { switchId, checked, onCheckedChange, defaultChecked, disabled, size } = useSwitchContext();
    return /* @__PURE__ */ jsx(
      RadixSwitchRoot,
      __spreadProps(__spreadValues({
        ref,
        id: id || switchId,
        checked,
        defaultChecked,
        onCheckedChange,
        disabled,
        className: clsx(control({ size }), className)
      }, props), {
        children: /* @__PURE__ */ jsx(RadixSwitchIndicator, { className: indicator({ size }) })
      })
    );
  }
);
Control.displayName = "Switch.Control";
var Switch = { Root, Label, Control };
export {
  Switch,
  Control as SwitchControl,
  Label as SwitchLabel,
  Root as SwitchRoot
};
//# sourceMappingURL=index.js.map