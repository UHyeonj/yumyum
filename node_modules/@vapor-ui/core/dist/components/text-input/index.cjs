'use client';
"use strict";
require("./index.css");
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/text-input/index.ts
var text_input_exports = {};
__export(text_input_exports, {
  TextInput: () => TextInput,
  TextInputField: () => Field,
  TextInputLabel: () => Label,
  TextInputRoot: () => Root
});
module.exports = __toCommonJS(text_input_exports);

// src/components/text-input/text-input.tsx
var import_react2 = require("react");
var import_react_primitive = require("@radix-ui/react-primitive");
var import_clsx = __toESM(require("clsx"));

// src/libs/create-context.ts
var import_react = require("react");
var getErrorMessage = (hook, provider) => {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
};
var createContext = ({
  name,
  strict = true,
  hookName = "useContext",
  providerName = "Provider",
  errorMessage,
  defaultValue
} = {}) => {
  const Context = (0, import_react.createContext)(defaultValue);
  Context.displayName = name;
  function useContext() {
    const context = (0, import_react.useContext)(Context);
    if (!context && strict) {
      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));
      error.name = "ContextError";
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext, Context];
};

// src/utils/create-split-props.ts
var createSplitProps = () => (props, keys) => keys.reduce(
  (previousValue, currentValue) => {
    const [target, source] = previousValue;
    const key = currentValue;
    if (source[key] !== void 0) {
      target[key] = source[key];
    }
    delete source[key];
    return [target, source];
  },
  [{}, __spreadValues({}, props)]
);

// src/components/text-input/text-input.css.ts
var import_createRuntimeFn = require("@vanilla-extract/recipes/createRuntimeFn");
var field = (0, import_createRuntimeFn.createRuntimeFn)({ defaultClassName: "interactions__13di4x95 interactions__13di4x91 interactions-scale_normal__13di4x96 interactions__13di4x94 text-input__npu94q5", variantClassNames: { invalid: { true: "text-input-invalid_true__npu94q7" }, size: { sm: "text-input-size_sm__npu94q8", md: "text-input-size_md__npu94q9", lg: "text-input-size_lg__npu94qa", xl: "text-input-size_xl__npu94qb" } }, defaultVariants: { invalid: false, size: "md" }, compoundVariants: [] });
var label = (0, import_createRuntimeFn.createRuntimeFn)({ defaultClassName: "text-input__npu94q3 text-input__npu94q2", variantClassNames: { visuallyHidden: { true: "visually-hidden__1q7xssa0" } }, defaultVariants: { visuallyHidden: false }, compoundVariants: [] });
var root = (0, import_createRuntimeFn.createRuntimeFn)({ defaultClassName: "text-input__npu94q0", variantClassNames: { disabled: { true: "text-input-disabled_true__npu94q1" } }, defaultVariants: { disabled: false }, compoundVariants: [] });

// src/components/text-input/text-input.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var [TextInputProvider, useTextInputContext] = createContext({
  name: "TextInput",
  hookName: "useTextInputContext",
  providerName: "TextInputProvider"
});
var Root = (0, import_react2.forwardRef)(
  (_a, ref) => {
    var _b = _a, { className, children } = _b, props = __objRest(_b, ["className", "children"]);
    const textInputId = (0, import_react2.useId)();
    const [textInputRootProps, otherProps] = createSplitProps()(props, [
      "type",
      "value",
      "onValueChange",
      "defaultValue",
      "size",
      "disabled",
      "invalid",
      "readOnly",
      "visuallyHidden",
      "placeholder"
    ]);
    const { disabled } = textInputRootProps;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TextInputProvider, { value: __spreadValues({ textInputId }, textInputRootProps), children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_react_primitive.Primitive.div,
      __spreadProps(__spreadValues({
        ref,
        className: (0, import_clsx.default)(root({ disabled }), className)
      }, otherProps), {
        children
      })
    ) });
  }
);
Root.displayName = "TextInput.Root";
var Label = (0, import_react2.forwardRef)(
  (_a, ref) => {
    var _b = _a, { htmlFor, className } = _b, props = __objRest(_b, ["htmlFor", "className"]);
    const { textInputId = htmlFor, visuallyHidden } = useTextInputContext();
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_react_primitive.Primitive.label,
      __spreadValues({
        ref,
        htmlFor: textInputId,
        className: (0, import_clsx.default)(label({ visuallyHidden }), className)
      }, props)
    );
  }
);
Label.displayName = "TextInput.Label";
var Field = (0, import_react2.forwardRef)(
  (_a, ref) => {
    var _b = _a, { id, className } = _b, props = __objRest(_b, ["id", "className"]);
    const {
      type,
      textInputId = id,
      value,
      onValueChange,
      defaultValue,
      disabled,
      invalid,
      readOnly,
      size,
      placeholder
    } = useTextInputContext();
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_react_primitive.Primitive.input,
      __spreadValues({
        ref,
        id: textInputId,
        type,
        value,
        onChange: (event) => onValueChange == null ? void 0 : onValueChange(event.target.value),
        defaultValue,
        disabled,
        "aria-invalid": invalid,
        readOnly,
        placeholder,
        className: (0, import_clsx.default)(field({ invalid, size }), className)
      }, props)
    );
  }
);
Field.displayName = "TextInput.Field";
var TextInput = { Root, Label, Field };
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TextInput,
  TextInputField,
  TextInputLabel,
  TextInputRoot
});
//# sourceMappingURL=index.cjs.map