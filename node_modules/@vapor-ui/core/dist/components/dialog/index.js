'use client';
import "./index.css";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/components/dialog/dialog.tsx
import { forwardRef } from "react";
import {
  Close as RadixClose,
  Content as RadixContent,
  Description as RadixDescription,
  Root as RadixDialog,
  Overlay as RadixOverlay,
  Portal as RadixPortal,
  Title as RadixTitle,
  Trigger as RadixTrigger
} from "@radix-ui/react-dialog";
import { Primitive } from "@radix-ui/react-primitive";
import clsx from "clsx";

// src/libs/create-context.ts
import { createContext as createReactContext, useContext as useReactContext } from "react";
var getErrorMessage = (hook, provider) => {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
};
var createContext = ({
  name,
  strict = true,
  hookName = "useContext",
  providerName = "Provider",
  errorMessage,
  defaultValue
} = {}) => {
  const Context = createReactContext(defaultValue);
  Context.displayName = name;
  function useContext() {
    const context = useReactContext(Context);
    if (!context && strict) {
      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));
      error.name = "ContextError";
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext, Context];
};

// src/components/dialog/dialog.css.ts
import { createRuntimeFn as _7a468 } from "@vanilla-extract/recipes/createRuntimeFn";
var body = "dialog__dt887tg";
var content = _7a468({ defaultClassName: "dialog__dt887t9 dialog__dt887t5", variantClassNames: { size: { md: "dialog__dt887t6", lg: "dialog__dt887t7", xl: "dialog__dt887t8" } }, defaultVariants: { size: "md" }, compoundVariants: [] });
var description = "dialog__dt887te";
var footer = "dialog__dt887th";
var header = "dialog__dt887tf";
var overlay = "dialog__dt887t2";
var title = "dialog__dt887td";

// src/components/dialog/dialog.tsx
import { jsx, jsxs } from "react/jsx-runtime";
var [DialogRoot, useDialogContext] = createContext({
  name: "Dialog",
  hookName: "useDialogContext",
  providerName: "DialogProvider"
});
var Root = (_a) => {
  var _b = _a, {
    size,
    closeOnClickOverlay,
    closeOnEscape,
    children
  } = _b, props = __objRest(_b, [
    "size",
    "closeOnClickOverlay",
    "closeOnEscape",
    "children"
  ]);
  return /* @__PURE__ */ jsx(RadixDialog, __spreadProps(__spreadValues({}, props), { children: /* @__PURE__ */ jsx(DialogRoot, { value: { size, closeOnClickOverlay, closeOnEscape }, children }) }));
};
var Portal = RadixPortal;
Portal.displayName = "Dialog.Portal";
var Overlay = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx(RadixOverlay, __spreadValues({ ref, className: clsx(overlay, className) }, props));
});
Overlay.displayName = "Dialog.Overlay";
var Content = forwardRef(
  (_a, ref) => {
    var _b = _a, { onPointerDownOutside, onEscapeKeyDown, className } = _b, props = __objRest(_b, ["onPointerDownOutside", "onEscapeKeyDown", "className"]);
    const { size, closeOnClickOverlay = true, closeOnEscape = true } = useDialogContext();
    const handlePointerDownOutside = (event) => {
      if (closeOnClickOverlay) return;
      event.preventDefault();
      onPointerDownOutside == null ? void 0 : onPointerDownOutside(event);
    };
    const handleEscapeKeyDown = (event) => {
      if (closeOnEscape) return;
      event.preventDefault();
      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(event);
    };
    return /* @__PURE__ */ jsx(
      RadixContent,
      __spreadValues({
        ref,
        className: clsx(content({ size }), className),
        onPointerDownOutside: handlePointerDownOutside,
        onEscapeKeyDown: handleEscapeKeyDown
      }, props)
    );
  }
);
Content.displayName = "Dialog.Content";
var CombinedContent = forwardRef((props, ref) => {
  return /* @__PURE__ */ jsxs(RadixPortal, { children: [
    /* @__PURE__ */ jsx(Overlay, {}),
    /* @__PURE__ */ jsx(Content, __spreadValues({ ref }, props))
  ] });
});
CombinedContent.displayName = "Dialog.CombinedContent";
var Trigger = forwardRef((props, ref) => {
  return /* @__PURE__ */ jsx(RadixTrigger, __spreadValues({ ref }, props));
});
Trigger.displayName = "Dialog.Trigger";
var Close = forwardRef((props, ref) => {
  return /* @__PURE__ */ jsx(RadixClose, __spreadValues({ ref }, props));
});
Close.displayName = "Dialog.Close";
var Title = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx(RadixTitle, __spreadValues({ ref, className: clsx(title, className) }, props));
});
Title.displayName = "Dialog.Title";
var Description = forwardRef(
  (_a, ref) => {
    var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
    return /* @__PURE__ */ jsx(
      RadixDescription,
      __spreadValues({
        ref,
        className: clsx(description, className)
      }, props)
    );
  }
);
Description.displayName = "Dialog.Description";
var Header = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx(Primitive.div, __spreadValues({ ref, className: clsx(header, className) }, props));
});
Header.displayName = "Dialog.Header";
var Body = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx(Primitive.div, __spreadValues({ ref, className: clsx(body, className) }, props));
});
Body.displayName = "Dialog.Body";
var Footer = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx(Primitive.div, __spreadValues({ ref, className: clsx(footer, className) }, props));
});
Footer.displayName = "Dialog.Footer";
var Dialog = {
  Root,
  Overlay,
  Content,
  CombinedContent,
  Portal,
  Trigger,
  Close,
  Title,
  Description,
  Header,
  Body,
  Footer
};
export {
  Dialog,
  Body as DialogBody,
  Close as DialogClose,
  CombinedContent as DialogCombinedContent,
  Content as DialogContent,
  Description as DialogDescription,
  Footer as DialogFooter,
  Header as DialogHeader,
  Overlay as DialogOverlay,
  Portal as DialogPortal,
  Root as DialogRoot,
  Title as DialogTitle,
  Trigger as DialogTrigger
};
//# sourceMappingURL=index.js.map