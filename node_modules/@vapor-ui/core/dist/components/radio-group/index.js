'use client';
import "./index.css";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/components/radio-group/radio-group.tsx
import { forwardRef, useId } from "react";
import { Primitive } from "@radix-ui/react-primitive";
import {
  Indicator as RadixIndicator,
  Item as RadixItem,
  Root as RadixRoot
} from "@radix-ui/react-radio-group";
import clsx from "clsx";

// src/libs/create-context.ts
import { createContext as createReactContext, useContext as useReactContext } from "react";
var getErrorMessage = (hook, provider) => {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
};
var createContext = ({
  name,
  strict = true,
  hookName = "useContext",
  providerName = "Provider",
  errorMessage,
  defaultValue
} = {}) => {
  const Context = createReactContext(defaultValue);
  Context.displayName = name;
  function useContext() {
    const context = useReactContext(Context);
    if (!context && strict) {
      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));
      error.name = "ContextError";
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext, Context];
};

// src/utils/create-split-props.ts
var createSplitProps = () => (props, keys) => keys.reduce(
  (previousValue, currentValue) => {
    const [target, source] = previousValue;
    const key = currentValue;
    if (source[key] !== void 0) {
      target[key] = source[key];
    }
    delete source[key];
    return [target, source];
  },
  [{}, __spreadValues({}, props)]
);

// src/components/radio-group/radio-group.css.ts
import { createRuntimeFn as _7a468 } from "@vanilla-extract/recipes/createRuntimeFn";
var control = _7a468({ defaultClassName: "interactions__13di4x95 interactions__13di4x91 interactions-scale_normal__13di4x96 interactions__13di4x93 radio-group__2zibu7e", variantClassNames: { invalid: { true: "radio-group__2zibu7f" }, size: { md: "radio-group__2zibu7g", lg: "radio-group__2zibu7h" } }, defaultVariants: { invalid: false, size: "md" }, compoundVariants: [] });
var indicator = "radio-group__2zibu7m";
var item = _7a468({ defaultClassName: "radio-group__2zibu7c radio-group__2zibu7a", variantClassNames: { disabled: { true: "radio-group__2zibu7b" } }, defaultVariants: { disabled: false }, compoundVariants: [] });
var label = _7a468({ defaultClassName: "radio-group__2zibu7o radio-group__2zibu7n", variantClassNames: { visuallyHidden: { true: "visually-hidden__1q7xssa0" } }, defaultVariants: { visuallyHidden: false }, compoundVariants: [] });
var root = _7a468({ defaultClassName: "radio-group__2zibu75 radio-group__2zibu70", variantClassNames: { size: { md: "radio-group__2zibu71", lg: "radio-group__2zibu72" }, orientation: { horizontal: "radio-group__2zibu73", vertical: "radio-group__2zibu74" } }, defaultVariants: { orientation: "vertical" }, compoundVariants: [] });

// src/components/radio-group/radio-group.tsx
import { jsx } from "react/jsx-runtime";
var [RadioGroupProvider, useRadioGroupContext] = createContext({
  name: "RadioGroup",
  hookName: "useRadioGroupContext",
  providerName: "RadioGroupProvider"
});
var Root = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  const [sharedProps, otherProps] = createSplitProps()(props, [
    "name",
    "required",
    "disabled",
    "value",
    "onValueChange",
    "defaultValue",
    "dir",
    "loop",
    "orientation",
    "invalid",
    "size",
    "visuallyHidden"
  ]);
  const { size, orientation } = sharedProps;
  return /* @__PURE__ */ jsx(RadioGroupProvider, { value: sharedProps, children: /* @__PURE__ */ jsx(
    RadixRoot,
    __spreadValues(__spreadValues({
      ref,
      className: clsx(root({ size, orientation }), className)
    }, sharedProps), otherProps)
  ) });
});
Root.displayName = "RadioGroup.Root";
var [RadioGroupItemProvider, useRadioGroupItemContext] = createContext({
  name: "RadioGroupItem",
  hookName: "useRadioGroupItemContext",
  providerName: "RadioGroupItemProvider"
});
var Item = forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  const radioGroupItemId = useId();
  const rootContext = useRadioGroupContext();
  const [itemProps, otherProps] = createSplitProps()(props, [
    "value",
    "disabled",
    "visuallyHidden",
    "size",
    "invalid"
  ]);
  const {
    disabled = rootContext.disabled,
    invalid = rootContext.invalid,
    visuallyHidden = rootContext.visuallyHidden
  } = itemProps;
  return /* @__PURE__ */ jsx(
    RadioGroupItemProvider,
    {
      value: __spreadProps(__spreadValues({}, itemProps), { radioGroupItemId, disabled, invalid, visuallyHidden }),
      children: /* @__PURE__ */ jsx(
        Primitive.div,
        __spreadValues({
          ref,
          className: clsx(item({ disabled }), className)
        }, otherProps)
      )
    }
  );
});
Item.displayName = "RadioGroup.Item";
var Control = forwardRef(
  (_a, ref) => {
    var _b = _a, { id, className } = _b, props = __objRest(_b, ["id", "className"]);
    const { size } = useRadioGroupContext();
    const { radioGroupItemId, value, invalid, disabled } = useRadioGroupItemContext();
    return /* @__PURE__ */ jsx(
      RadixItem,
      __spreadProps(__spreadValues({
        ref,
        id: id || radioGroupItemId,
        value,
        disabled,
        "aria-invalid": invalid,
        className: clsx(control({ size, invalid }), className)
      }, props), {
        children: /* @__PURE__ */ jsx(RadixIndicator, { className: clsx(indicator) })
      })
    );
  }
);
Control.displayName = "RadioGroup.Control";
var Label = forwardRef(
  (_a, ref) => {
    var _b = _a, { htmlFor, className } = _b, props = __objRest(_b, ["htmlFor", "className"]);
    const { radioGroupItemId, visuallyHidden } = useRadioGroupItemContext();
    return /* @__PURE__ */ jsx(
      Primitive.label,
      __spreadValues({
        ref,
        htmlFor: htmlFor || radioGroupItemId,
        className: clsx(label({ visuallyHidden }), className)
      }, props)
    );
  }
);
Label.displayName = "RadioGroup.Label";
var RadioGroup = { Root, Item, Control, Label };
export {
  RadioGroup,
  Control as RadioGroupControl,
  Item as RadioGroupItem,
  Label as RadioGroupLabel,
  Root as RadioGroupRoot
};
//# sourceMappingURL=index.js.map