{"version":3,"sources":["../../../src/components/create-theme-config/index.ts","../../../src/components/theme-inject/theme-injector.ts","../../../src/components/create-theme-config/create-theme-config.ts"],"sourcesContent":["export * from './create-theme-config';\n","const DARK_CLASS_NAME = 'vapor-dark-theme';\nconst LIGHT_CLASS_NAME = 'vapor-light-theme';\n\nconst THEME_CONFIG = {\n    STORAGE_KEY: 'vapor-ui-theme',\n    CLASS_NAMES: {\n        dark: DARK_CLASS_NAME,\n        light: LIGHT_CLASS_NAME,\n    },\n    RADIUS_FACTOR_MAP: {\n        none: 0,\n        sm: 0.5,\n        md: 1,\n        lg: 1.5,\n        xl: 2,\n        full: 3,\n    },\n} as const;\n\ninterface PrimaryColorSet {\n    'vapor-color-background-primary': string;\n    'vapor-color-border-primary': string;\n    'vapor-color-foreground-primary': string;\n    'vapor-color-foreground-primary-darker': string;\n    'vapor-color-foreground-accent': string;\n    'vapor-color-background-rgb-primary': string;\n}\n\ninterface HSL {\n    h: number; // 0-360\n    s: number; // 0-1\n    l: number; // 0-1\n}\n\ntype ThemeConfig = typeof THEME_CONFIG;\ntype Appearance = keyof typeof THEME_CONFIG.CLASS_NAMES;\ntype Radius = keyof typeof THEME_CONFIG.RADIUS_FACTOR_MAP;\ntype Scaling = number;\n\ninterface ThemeState {\n    appearance: Appearance;\n    radius: Radius;\n    scaling: Scaling;\n    primaryColor?: string;\n}\n\ninterface CssVarNames {\n    radiusFactor: string;\n    scaleFactor: string;\n    colorBackgroundPrimary: string;\n    colorBorderPrimary: string;\n    colorForegroundPrimary: string;\n    colorForegroundPrimaryDarker: string;\n    colorForegroundAccent: string;\n    colorBackgroundRgbPrimary: string;\n}\n\n/**\n * A self-contained script injected into the HTML to prevent FOUC (Flash of Unstyled Content).\n *\n * @important This function is stringified and executed in an isolated scope.\n * - It cannot have any external dependencies.\n * - Avoid modern JS syntax (e.g., object spread `...`) that might be transpiled\n * into helper functions. These helpers will not be available and will cause\n * a ReferenceError. Use safer alternatives like `Object.assign`.\n */\nconst themeInjectScript = (\n    initialDefaultTheme: ThemeState,\n    storageKey: string,\n    config: ThemeConfig,\n    cssVarNames: CssVarNames,\n) => {\n    (function () {\n        const calculatePrimaryColorSet = (\n            baseColorHex: string,\n            mode: 'light' | 'dark',\n        ): PrimaryColorSet => {\n            const hexToHsl = (hex: string): HSL => {\n                let r = 0,\n                    g = 0,\n                    b = 0;\n                if (hex.length === 4) {\n                    r = parseInt(hex[1] + hex[1], 16);\n                    g = parseInt(hex[2] + hex[2], 16);\n                    b = parseInt(hex[3] + hex[3], 16);\n                } else if (hex.length === 7) {\n                    r = parseInt(hex.substring(1, 3), 16);\n                    g = parseInt(hex.substring(3, 5), 16);\n                    b = parseInt(hex.substring(5, 7), 16);\n                }\n\n                r /= 255;\n                g /= 255;\n                b /= 255;\n                const max = Math.max(r, g, b),\n                    min = Math.min(r, g, b);\n                let h = 0,\n                    s = 0,\n                    l = (max + min) / 2;\n\n                if (max !== min) {\n                    const d = max - min;\n                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                    switch (max) {\n                        case r:\n                            h = (g - b) / d + (g < b ? 6 : 0);\n                            break;\n                        case g:\n                            h = (b - r) / d + 2;\n                            break;\n                        case b:\n                            h = (r - g) / d + 4;\n                            break;\n                    }\n                    h /= 6;\n                }\n                return { h: h * 360, s, l };\n            };\n\n            const hslToHex = (hsl: HSL): string => {\n                const { h, s, l } = hsl;\n                let r, g, b;\n\n                if (s === 0) {\n                    r = g = b = l; // achromatic\n                } else {\n                    const hue2rgb = (p: number, q: number, t: number) => {\n                        if (t < 0) t += 1;\n                        if (t > 1) t -= 1;\n                        if (t < 1 / 6) return p + (q - p) * 6 * t;\n                        if (t < 1 / 2) return q;\n                        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                        return p;\n                    };\n                    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                    const p = 2 * l - q;\n                    r = hue2rgb(p, q, h / 360 + 1 / 3);\n                    g = hue2rgb(p, q, h / 360);\n                    b = hue2rgb(p, q, h / 360 - 1 / 3);\n                }\n                const toHex = (x: number) => {\n                    const hex = Math.round(x * 255).toString(16);\n                    return hex.length === 1 ? '0' + hex : hex;\n                };\n                return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n            };\n\n            const hexToRgbString = (hex: string): string => {\n                let r = 0,\n                    g = 0,\n                    b = 0;\n                if (hex.length === 4) {\n                    r = parseInt(hex[1] + hex[1], 16);\n                    g = parseInt(hex[2] + hex[2], 16);\n                    b = parseInt(hex[3] + hex[3], 16);\n                } else if (hex.length === 7) {\n                    r = parseInt(hex.substring(1, 3), 16);\n                    g = parseInt(hex.substring(3, 5), 16);\n                    b = parseInt(hex.substring(5, 7), 16);\n                }\n                return `${r}, ${g}, ${b}`;\n            };\n\n            const baseHsl = hexToHsl(baseColorHex);\n\n            // Set accent color: dark for light mode, light for dark mode.\n            const accentColor =\n                baseHsl.l > 0.5 ? 'var(--vapor-color-black)' : 'var(--vapor-color-white)';\n            const backgroundRgb = hexToRgbString(baseColorHex);\n\n            const commonColors = {\n                'vapor-color-foreground-accent': accentColor,\n                'vapor-color-background-rgb-primary': backgroundRgb,\n            };\n\n            if (mode === 'light') {\n                const foregroundHsl = Object.assign({}, baseHsl, {\n                    l: Math.max(0, baseHsl.l - 0.08),\n                });\n                const foregroundDarkerHsl = Object.assign({}, foregroundHsl, {\n                    l: Math.max(0, foregroundHsl.l - 0.08),\n                });\n\n                return Object.assign(\n                    {\n                        'vapor-color-background-primary': baseColorHex,\n                        'vapor-color-border-primary': baseColorHex,\n                        'vapor-color-foreground-primary': hslToHex(foregroundHsl),\n                        'vapor-color-foreground-primary-darker': hslToHex(foregroundDarkerHsl),\n                    },\n                    commonColors,\n                );\n            } else {\n                const foregroundDarkerHsl = Object.assign({}, baseHsl, {\n                    l: Math.min(1, baseHsl.l + 0.08),\n                });\n\n                return Object.assign(\n                    {\n                        'vapor-color-background-primary': baseColorHex,\n                        'vapor-color-border-primary': baseColorHex,\n                        'vapor-color-foreground-primary': baseColorHex,\n                        'vapor-color-foreground-primary-darker': hslToHex(foregroundDarkerHsl),\n                    },\n                    commonColors,\n                );\n            }\n        };\n\n        const root = document.documentElement;\n        let currentThemes: ThemeState = initialDefaultTheme;\n\n        try {\n            const storedItem = localStorage.getItem(storageKey);\n            if (storedItem) {\n                const storedSettings = JSON.parse(storedItem);\n                // IMPORTANT: Use Object.assign instead of object spread (...) to avoid\n                // dependency on transpiled helper functions.\n                currentThemes = Object.assign({}, initialDefaultTheme, storedSettings);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (e) {\n            /* Fails silently */\n        }\n\n        try {\n            // 1. Apply color theme\n            if (currentThemes.appearance === 'dark') {\n                root.classList.add(config.CLASS_NAMES.dark);\n                root.classList.remove(config.CLASS_NAMES.light);\n            } else {\n                root.classList.add(config.CLASS_NAMES.light);\n                root.classList.remove(config.CLASS_NAMES.dark);\n            }\n\n            // 2. Apply radius theme\n            const radiusFactor = config.RADIUS_FACTOR_MAP[currentThemes.radius] ?? 1;\n            root.style.setProperty(`--${cssVarNames.radiusFactor}`, radiusFactor.toString());\n\n            // 3. Apply scale theme\n            const scaleFactor = currentThemes.scaling ?? 1;\n            root.style.setProperty(`--${cssVarNames.scaleFactor}`, scaleFactor.toString());\n\n            // 4. Apply primary color variables\n            if (currentThemes.primaryColor) {\n                const colorSet = calculatePrimaryColorSet(\n                    currentThemes.primaryColor,\n                    currentThemes.appearance,\n                );\n\n                root.style.setProperty(\n                    `--${cssVarNames.colorBackgroundPrimary}`,\n                    colorSet['vapor-color-background-primary'],\n                );\n                root.style.setProperty(\n                    `--${cssVarNames.colorBorderPrimary}`,\n                    colorSet['vapor-color-border-primary'],\n                );\n                root.style.setProperty(\n                    `--${cssVarNames.colorForegroundPrimary}`,\n                    colorSet['vapor-color-foreground-primary'],\n                );\n                root.style.setProperty(\n                    `--${cssVarNames.colorForegroundPrimaryDarker}`,\n                    colorSet['vapor-color-foreground-primary-darker'],\n                );\n                root.style.setProperty(\n                    `--${cssVarNames.colorForegroundAccent}`,\n                    colorSet['vapor-color-foreground-accent'],\n                );\n                root.style.setProperty(\n                    `--${cssVarNames.colorBackgroundRgbPrimary}`,\n                    colorSet['vapor-color-background-rgb-primary'],\n                );\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (e) {\n            /* Fails silently */\n        }\n    })();\n};\n\nexport {\n    THEME_CONFIG,\n    themeInjectScript,\n    type ThemeConfig,\n    type Appearance,\n    type Radius,\n    type Scaling,\n    type ThemeState,\n};\n","import { THEME_CONFIG } from '../theme-inject/theme-injector';\nimport { type ThemeState } from '../theme-provider';\n\n/* -------------------------------------------------------------------------------------------------\n * Constants & Core Types\n * -----------------------------------------------------------------------------------------------*/\nconst DEFAULT_THEME: ThemeState = {\n    appearance: 'light',\n    radius: 'md',\n    scaling: 1,\n};\n\ninterface VaporThemeConfig extends Partial<ThemeState> {\n    /** localStorage key for persistence */\n    storageKey?: string;\n    /** CSP nonce value */\n    nonce?: string;\n    /** Enable system theme detection (for future extension) */\n    enableSystemTheme?: boolean;\n}\ninterface ResolvedThemeConfig extends ThemeState {\n    storageKey: string;\n    nonce?: string;\n    enableSystemTheme: boolean;\n}\n\n/**\n * Creates a complete configuration object by merging user config with defaults\n *\n * @example\n * ```tsx\n * const config = createThemeConfig({\n *   appearance: 'dark',\n *   storageKey: 'my-app-theme'\n * });\n * ```\n */\nconst createThemeConfig = (userConfig?: VaporThemeConfig): ResolvedThemeConfig => {\n    const {\n        storageKey = THEME_CONFIG.STORAGE_KEY,\n        nonce,\n        enableSystemTheme = false,\n        ...themeProps\n    } = userConfig ?? {};\n\n    return {\n        ...DEFAULT_THEME,\n        ...themeProps,\n        storageKey,\n        nonce,\n        enableSystemTheme,\n    };\n};\n\nexport { createThemeConfig };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAM,kBAAkB;AACxB,IAAM,mBAAmB;AAEzB,IAAM,eAAe;AAAA,EACjB,aAAa;AAAA,EACb,aAAa;AAAA,IACT,MAAM;AAAA,IACN,OAAO;AAAA,EACX;AAAA,EACA,mBAAmB;AAAA,IACf,MAAM;AAAA,IACN,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,MAAM;AAAA,EACV;AACJ;;;ACXA,IAAM,gBAA4B;AAAA,EAC9B,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,SAAS;AACb;AA2BA,IAAM,oBAAoB,CAAC,eAAuD;AAC9E,QAKI,uCAAc,CAAC,GAJf;AAAA,iBAAa,aAAa;AAAA,IAC1B;AAAA,IACA,oBAAoB;AAAA,EAzC5B,IA2CQ,IADG,uBACH,IADG;AAAA,IAHH;AAAA,IACA;AAAA,IACA;AAAA;AAIJ,SAAO,gDACA,gBACA,aAFA;AAAA,IAGH;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;","names":[]}