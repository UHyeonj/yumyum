import * as react from 'react';
import { ReactNode } from 'react';
import * as react_jsx_runtime from 'react/jsx-runtime';

type Appearance = 'light' | 'dark';
type Radius = 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full';
type Scaling = number;
interface ThemeState {
    appearance: Appearance;
    radius: Radius;
    scaling: Scaling;
    primaryColor?: string;
}
interface VaporThemeConfig extends Partial<ThemeState> {
    /** localStorage key for persistence. */
    storageKey?: string;
    /** CSP nonce value. */
    nonce?: string;
    /** Enable system theme detection (for future extension). */
    enableSystemTheme?: boolean;
}
interface ThemeContextValue extends ThemeState {
    setTheme: (newTheme: Partial<ThemeState>) => void;
}
interface ThemeProviderProps {
    children: ReactNode;
    config?: VaporThemeConfig;
}
declare const ThemeProvider: ({ children, config }: ThemeProviderProps) => react_jsx_runtime.JSX.Element;
interface ThemeScriptProps {
    config?: VaporThemeConfig;
}
declare const ThemeScript: react.MemoExoticComponent<({ config }: ThemeScriptProps) => react_jsx_runtime.JSX.Element>;
declare const useTheme: () => ThemeContextValue;

export { type Appearance, type Radius, type Scaling, ThemeProvider, ThemeScript, type ThemeState, type VaporThemeConfig, useTheme };
