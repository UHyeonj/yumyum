'use client';
"use strict";
require("./index.css");
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/theme-provider/index.ts
var theme_provider_exports = {};
__export(theme_provider_exports, {
  ThemeProvider: () => ThemeProvider,
  ThemeScript: () => ThemeScript,
  useTheme: () => useTheme
});
module.exports = __toCommonJS(theme_provider_exports);

// src/components/theme-provider/theme-provider.tsx
var import_react = require("react");

// src/styles/global-var.css.ts
var RADIUS_FACTOR_VAR_NAME = "vapor-radius-factor";
var SCALE_FACTOR_VAR_NAME = "vapor-scale-factor";

// src/components/theme-inject/theme-injector.ts
var DARK_CLASS_NAME = "vapor-dark-theme";
var LIGHT_CLASS_NAME = "vapor-light-theme";
var THEME_CONFIG = {
  STORAGE_KEY: "vapor-ui-theme",
  CLASS_NAMES: {
    dark: DARK_CLASS_NAME,
    light: LIGHT_CLASS_NAME
  },
  RADIUS_FACTOR_MAP: {
    none: 0,
    sm: 0.5,
    md: 1,
    lg: 1.5,
    xl: 2,
    full: 3
  }
};
var themeInjectScript = (initialDefaultTheme, storageKey, config, cssVarNames) => {
  (function() {
    var _a, _b;
    const calculatePrimaryColorSet2 = (baseColorHex, mode) => {
      const hexToHsl = (hex) => {
        let r = 0, g = 0, b = 0;
        if (hex.length === 4) {
          r = parseInt(hex[1] + hex[1], 16);
          g = parseInt(hex[2] + hex[2], 16);
          b = parseInt(hex[3] + hex[3], 16);
        } else if (hex.length === 7) {
          r = parseInt(hex.substring(1, 3), 16);
          g = parseInt(hex.substring(3, 5), 16);
          b = parseInt(hex.substring(5, 7), 16);
        }
        r /= 255;
        g /= 255;
        b /= 255;
        const max = Math.max(r, g, b), min = Math.min(r, g, b);
        let h = 0, s = 0, l = (max + min) / 2;
        if (max !== min) {
          const d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r) / d + 2;
              break;
            case b:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return { h: h * 360, s, l };
      };
      const hslToHex = (hsl) => {
        const { h, s, l } = hsl;
        let r, g, b;
        if (s === 0) {
          r = g = b = l;
        } else {
          const hue2rgb = (p2, q2, t) => {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p2 + (q2 - p2) * 6 * t;
            if (t < 1 / 2) return q2;
            if (t < 2 / 3) return p2 + (q2 - p2) * (2 / 3 - t) * 6;
            return p2;
          };
          const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          const p = 2 * l - q;
          r = hue2rgb(p, q, h / 360 + 1 / 3);
          g = hue2rgb(p, q, h / 360);
          b = hue2rgb(p, q, h / 360 - 1 / 3);
        }
        const toHex = (x) => {
          const hex = Math.round(x * 255).toString(16);
          return hex.length === 1 ? "0" + hex : hex;
        };
        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
      };
      const hexToRgbString = (hex) => {
        let r = 0, g = 0, b = 0;
        if (hex.length === 4) {
          r = parseInt(hex[1] + hex[1], 16);
          g = parseInt(hex[2] + hex[2], 16);
          b = parseInt(hex[3] + hex[3], 16);
        } else if (hex.length === 7) {
          r = parseInt(hex.substring(1, 3), 16);
          g = parseInt(hex.substring(3, 5), 16);
          b = parseInt(hex.substring(5, 7), 16);
        }
        return `${r}, ${g}, ${b}`;
      };
      const baseHsl = hexToHsl(baseColorHex);
      const accentColor = baseHsl.l > 0.5 ? "var(--vapor-color-black)" : "var(--vapor-color-white)";
      const backgroundRgb = hexToRgbString(baseColorHex);
      const commonColors = {
        "vapor-color-foreground-accent": accentColor,
        "vapor-color-background-rgb-primary": backgroundRgb
      };
      if (mode === "light") {
        const foregroundHsl = Object.assign({}, baseHsl, {
          l: Math.max(0, baseHsl.l - 0.08)
        });
        const foregroundDarkerHsl = Object.assign({}, foregroundHsl, {
          l: Math.max(0, foregroundHsl.l - 0.08)
        });
        return Object.assign(
          {
            "vapor-color-background-primary": baseColorHex,
            "vapor-color-border-primary": baseColorHex,
            "vapor-color-foreground-primary": hslToHex(foregroundHsl),
            "vapor-color-foreground-primary-darker": hslToHex(foregroundDarkerHsl)
          },
          commonColors
        );
      } else {
        const foregroundDarkerHsl = Object.assign({}, baseHsl, {
          l: Math.min(1, baseHsl.l + 0.08)
        });
        return Object.assign(
          {
            "vapor-color-background-primary": baseColorHex,
            "vapor-color-border-primary": baseColorHex,
            "vapor-color-foreground-primary": baseColorHex,
            "vapor-color-foreground-primary-darker": hslToHex(foregroundDarkerHsl)
          },
          commonColors
        );
      }
    };
    const root = document.documentElement;
    let currentThemes = initialDefaultTheme;
    try {
      const storedItem = localStorage.getItem(storageKey);
      if (storedItem) {
        const storedSettings = JSON.parse(storedItem);
        currentThemes = Object.assign({}, initialDefaultTheme, storedSettings);
      }
    } catch (e) {
    }
    try {
      if (currentThemes.appearance === "dark") {
        root.classList.add(config.CLASS_NAMES.dark);
        root.classList.remove(config.CLASS_NAMES.light);
      } else {
        root.classList.add(config.CLASS_NAMES.light);
        root.classList.remove(config.CLASS_NAMES.dark);
      }
      const radiusFactor = (_a = config.RADIUS_FACTOR_MAP[currentThemes.radius]) != null ? _a : 1;
      root.style.setProperty(`--${cssVarNames.radiusFactor}`, radiusFactor.toString());
      const scaleFactor = (_b = currentThemes.scaling) != null ? _b : 1;
      root.style.setProperty(`--${cssVarNames.scaleFactor}`, scaleFactor.toString());
      if (currentThemes.primaryColor) {
        const colorSet = calculatePrimaryColorSet2(
          currentThemes.primaryColor,
          currentThemes.appearance
        );
        root.style.setProperty(
          `--${cssVarNames.colorBackgroundPrimary}`,
          colorSet["vapor-color-background-primary"]
        );
        root.style.setProperty(
          `--${cssVarNames.colorBorderPrimary}`,
          colorSet["vapor-color-border-primary"]
        );
        root.style.setProperty(
          `--${cssVarNames.colorForegroundPrimary}`,
          colorSet["vapor-color-foreground-primary"]
        );
        root.style.setProperty(
          `--${cssVarNames.colorForegroundPrimaryDarker}`,
          colorSet["vapor-color-foreground-primary-darker"]
        );
        root.style.setProperty(
          `--${cssVarNames.colorForegroundAccent}`,
          colorSet["vapor-color-foreground-accent"]
        );
        root.style.setProperty(
          `--${cssVarNames.colorBackgroundRgbPrimary}`,
          colorSet["vapor-color-background-rgb-primary"]
        );
      }
    } catch (e) {
    }
  })();
};

// src/components/create-theme-config/create-theme-config.ts
var DEFAULT_THEME = {
  appearance: "light",
  radius: "md",
  scaling: 1
};
var createThemeConfig = (userConfig) => {
  const _a = userConfig != null ? userConfig : {}, {
    storageKey = THEME_CONFIG.STORAGE_KEY,
    nonce,
    enableSystemTheme = false
  } = _a, themeProps = __objRest(_a, [
    "storageKey",
    "nonce",
    "enableSystemTheme"
  ]);
  return __spreadProps(__spreadValues(__spreadValues({}, DEFAULT_THEME), themeProps), {
    storageKey,
    nonce,
    enableSystemTheme
  });
};

// src/components/theme-provider/theme-provider.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var COLOR_BACKGROUND_PRIMARY_VAR_NAME = "vapor-color-background-primary";
var COLOR_BORDER_PRIMARY_VAR_NAME = "vapor-color-border-primary";
var COLOR_FOREGROUND_PRIMARY_VAR_NAME = "vapor-color-foreground-primary";
var COLOR_FOREGROUND_PRIMARY_DARKER_VAR_NAME = "vapor-color-foreground-primary-darker";
var COLOR_FOREGROUND_ACCENT_VAR_NAME = "vapor-color-foreground-accent";
var COLOR_BACKGROUND_RGB_PRIMARY_VAR_NAME = "vapor-color-background-rgb-primary";
var calculatePrimaryColorSet = (baseColorHex, mode) => {
  const hexToHsl = (hex) => {
    let r = 0, g = 0, b = 0;
    if (hex.length === 4) {
      r = parseInt(hex[1] + hex[1], 16);
      g = parseInt(hex[2] + hex[2], 16);
      b = parseInt(hex[3] + hex[3], 16);
    } else if (hex.length === 7) {
      r = parseInt(hex.substring(1, 3), 16);
      g = parseInt(hex.substring(3, 5), 16);
      b = parseInt(hex.substring(5, 7), 16);
    }
    r /= 255;
    g /= 255;
    b /= 255;
    const max = Math.max(r, g, b), min = Math.min(r, g, b);
    let h = 0, s = 0, l = (max + min) / 2;
    if (max !== min) {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return { h: h * 360, s, l };
  };
  const hslToHex = (hsl) => {
    const { h, s, l } = hsl;
    let r, g, b;
    if (s === 0) {
      r = g = b = l;
    } else {
      const hue2rgb = (p2, q2, t) => {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p2 + (q2 - p2) * 6 * t;
        if (t < 1 / 2) return q2;
        if (t < 2 / 3) return p2 + (q2 - p2) * (2 / 3 - t) * 6;
        return p2;
      };
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      const p = 2 * l - q;
      r = hue2rgb(p, q, h / 360 + 1 / 3);
      g = hue2rgb(p, q, h / 360);
      b = hue2rgb(p, q, h / 360 - 1 / 3);
    }
    const toHex = (x) => {
      const hex = Math.round(x * 255).toString(16);
      return hex.length === 1 ? "0" + hex : hex;
    };
    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
  };
  const hexToRgbString = (hex) => {
    let r = 0, g = 0, b = 0;
    if (hex.length === 4) {
      r = parseInt(hex[1] + hex[1], 16);
      g = parseInt(hex[2] + hex[2], 16);
      b = parseInt(hex[3] + hex[3], 16);
    } else if (hex.length === 7) {
      r = parseInt(hex.substring(1, 3), 16);
      g = parseInt(hex.substring(3, 5), 16);
      b = parseInt(hex.substring(5, 7), 16);
    }
    return `${r}, ${g}, ${b}`;
  };
  const baseHsl = hexToHsl(baseColorHex);
  const accentColor = baseHsl.l > 0.5 ? "var(--vapor-color-black)" : "var(--vapor-color-white)";
  const backgroundRgb = hexToRgbString(baseColorHex);
  const commonColors = {
    "vapor-color-foreground-accent": accentColor,
    "vapor-color-background-rgb-primary": backgroundRgb
  };
  if (mode === "light") {
    const foregroundHsl = __spreadProps(__spreadValues({}, baseHsl), { l: Math.max(0, baseHsl.l - 0.08) });
    const foregroundDarkerHsl = __spreadProps(__spreadValues({}, foregroundHsl), {
      l: Math.max(0, foregroundHsl.l - 0.08)
    });
    return __spreadValues({
      "vapor-color-background-primary": baseColorHex,
      "vapor-color-border-primary": baseColorHex,
      "vapor-color-foreground-primary": hslToHex(foregroundHsl),
      "vapor-color-foreground-primary-darker": hslToHex(foregroundDarkerHsl)
    }, commonColors);
  } else {
    const foregroundDarkerHsl = __spreadProps(__spreadValues({}, baseHsl), { l: Math.min(1, baseHsl.l + 0.08) });
    return __spreadValues({
      "vapor-color-background-primary": baseColorHex,
      "vapor-color-border-primary": baseColorHex,
      "vapor-color-foreground-primary": baseColorHex,
      "vapor-color-foreground-primary-darker": hslToHex(foregroundDarkerHsl)
    }, commonColors);
  }
};
function validateThemeConfig(config) {
  if (!config || typeof config !== "object") return true;
  const c = config;
  if (c.appearance !== void 0 && !["light", "dark"].includes(c.appearance)) {
    console.warn('[@vapor-ui/core] Invalid appearance type. Expected "light" or "dark".');
    return false;
  }
  if (c.radius !== void 0 && !Object.keys(THEME_CONFIG.RADIUS_FACTOR_MAP).includes(c.radius)) {
    console.warn("[@vapor-ui/core] Invalid radius type. Expected a valid radius key.");
    return false;
  }
  if (c.scaling !== void 0 && typeof c.scaling !== "number") {
    console.warn("[@vapor-ui/core] Invalid scaling type. Expected a number.");
    return false;
  }
  if (c.storageKey !== void 0 && typeof c.storageKey !== "string") {
    console.warn("[@vapor-ui/core] Invalid storageKey type. Expected string.");
    return false;
  }
  if (c.primaryColor !== void 0 && !/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(c.primaryColor)) {
    console.warn(
      '[@vapor-ui/core] Invalid primaryColor. Expected a valid hex code (e.g., "#RRGGBB").'
    );
    return false;
  }
  return true;
}
var ThemeContext = (0, import_react.createContext)(void 0);
var ThemeProvider = ({ children, config }) => {
  const resolvedConfig = (0, import_react.useMemo)(() => {
    if (config) {
      validateThemeConfig(config);
    }
    return createThemeConfig(config);
  }, [config]);
  const [themeState, internalSetThemeState] = (0, import_react.useState)(() => {
    const _a = resolvedConfig, { storageKey, nonce, enableSystemTheme } = _a, defaultTheme = __objRest(_a, ["storageKey", "nonce", "enableSystemTheme"]);
    if (typeof window === "undefined") {
      return defaultTheme;
    }
    try {
      const storedItem = localStorage.getItem(resolvedConfig.storageKey);
      const storedSettings = storedItem ? JSON.parse(storedItem) : {};
      return __spreadValues(__spreadValues({}, defaultTheme), storedSettings);
    } catch (e) {
      console.error("[@vapor-ui/core] Failed to read theme from localStorage.", e);
      return defaultTheme;
    }
  });
  const setTheme = (0, import_react.useCallback)(
    (newThemePartial) => {
      internalSetThemeState((prevState) => {
        const updatedState = __spreadValues(__spreadValues({}, prevState), newThemePartial);
        try {
          localStorage.setItem(resolvedConfig.storageKey, JSON.stringify(updatedState));
        } catch (e) {
          console.error(
            "[@vapor-ui/core] Could not save theme state to localStorage.",
            e
          );
        }
        return updatedState;
      });
    },
    [resolvedConfig.storageKey]
  );
  (0, import_react.useEffect)(() => {
    const handleStorageChange = (event) => {
      if (event.key === resolvedConfig.storageKey && event.newValue) {
        try {
          internalSetThemeState(JSON.parse(event.newValue));
        } catch (e) {
          console.error(
            "[@vapor-ui/core] Error parsing stored theme from storage event.",
            e
          );
        }
      }
    };
    window.addEventListener("storage", handleStorageChange);
    return () => window.removeEventListener("storage", handleStorageChange);
  }, [resolvedConfig.storageKey]);
  (0, import_react.useEffect)(() => {
    var _a;
    const root = document.documentElement;
    const { appearance, radius, scaling, primaryColor } = themeState;
    if (appearance === "dark") {
      root.classList.add(THEME_CONFIG.CLASS_NAMES.dark);
      root.classList.remove(THEME_CONFIG.CLASS_NAMES.light);
    } else {
      root.classList.add(THEME_CONFIG.CLASS_NAMES.light);
      root.classList.remove(THEME_CONFIG.CLASS_NAMES.dark);
    }
    const radiusFactor = (_a = THEME_CONFIG.RADIUS_FACTOR_MAP[radius]) != null ? _a : 1;
    root.style.setProperty(`--${RADIUS_FACTOR_VAR_NAME}`, radiusFactor.toString());
    const currentScaleFactor = scaling != null ? scaling : 1;
    root.style.setProperty(`--${SCALE_FACTOR_VAR_NAME}`, currentScaleFactor.toString());
    if (primaryColor) {
      const colorSet = calculatePrimaryColorSet(primaryColor, appearance);
      root.style.setProperty(
        `--${COLOR_BACKGROUND_PRIMARY_VAR_NAME}`,
        colorSet["vapor-color-background-primary"]
      );
      root.style.setProperty(
        `--${COLOR_BORDER_PRIMARY_VAR_NAME}`,
        colorSet["vapor-color-border-primary"]
      );
      root.style.setProperty(
        `--${COLOR_FOREGROUND_PRIMARY_VAR_NAME}`,
        colorSet["vapor-color-foreground-primary"]
      );
      root.style.setProperty(
        `--${COLOR_FOREGROUND_PRIMARY_DARKER_VAR_NAME}`,
        colorSet["vapor-color-foreground-primary-darker"]
      );
      root.style.setProperty(
        `--${COLOR_FOREGROUND_ACCENT_VAR_NAME}`,
        colorSet["vapor-color-foreground-accent"]
      );
      root.style.setProperty(
        `--${COLOR_BACKGROUND_RGB_PRIMARY_VAR_NAME}`,
        colorSet["vapor-color-background-rgb-primary"]
      );
    }
  }, [themeState]);
  const contextValue = (0, import_react.useMemo)(() => __spreadProps(__spreadValues({}, themeState), { setTheme }), [themeState, setTheme]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ThemeContext.Provider, { value: contextValue, children });
};
var ThemeScript = (0, import_react.memo)(({ config }) => {
  const resolvedConfig = (0, import_react.useMemo)(() => {
    return createThemeConfig(config);
  }, [config]);
  const cssVarNames = {
    radiusFactor: RADIUS_FACTOR_VAR_NAME,
    scaleFactor: SCALE_FACTOR_VAR_NAME,
    colorBackgroundPrimary: COLOR_BACKGROUND_PRIMARY_VAR_NAME,
    colorBorderPrimary: COLOR_BORDER_PRIMARY_VAR_NAME,
    colorForegroundPrimary: COLOR_FOREGROUND_PRIMARY_VAR_NAME,
    colorForegroundPrimaryDarker: COLOR_FOREGROUND_PRIMARY_DARKER_VAR_NAME,
    colorForegroundAccent: COLOR_FOREGROUND_ACCENT_VAR_NAME,
    colorBackgroundRgbPrimary: COLOR_BACKGROUND_RGB_PRIMARY_VAR_NAME
  };
  const _a = resolvedConfig, { storageKey, nonce, enableSystemTheme } = _a, defaultTheme = __objRest(_a, ["storageKey", "nonce", "enableSystemTheme"]);
  const scriptContent = `(${themeInjectScript.toString()})(
        ${JSON.stringify(defaultTheme)},
        '${storageKey}',
        ${JSON.stringify(THEME_CONFIG)},
        ${JSON.stringify(cssVarNames)}
    )`;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    "script",
    {
      nonce: resolvedConfig.nonce,
      suppressHydrationWarning: true,
      dangerouslySetInnerHTML: { __html: scriptContent }
    }
  );
});
ThemeScript.displayName = "ThemeScript";
var useTheme = () => {
  const context = (0, import_react.useContext)(ThemeContext);
  if (context === void 0) {
    throw new Error("`useTheme` must be used within a `ThemeProvider`.");
  }
  return context;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ThemeProvider,
  ThemeScript,
  useTheme
});
//# sourceMappingURL=index.cjs.map